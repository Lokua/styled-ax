/* styled-ax | license MIT | https://github.com/Lokua/styled-ax.git */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.styledAx = factory());
}(this, (function () { 'use strict';

/* @license | styled-ax | MIT license | https://github.com/lokua/styled-ax.git */
var index = function (theme) { return Object.assign(
  createAccessor(createValuesAccessor()),
  createUserAccessors(theme)
); };

function createAccessor(applyKeys) {
  return function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    return function () {
    var b = [], len = arguments.length;
    while ( len-- ) b[ len ] = arguments[ len ];

    return typeof b[0] === "function" ?
    function (props) {
      var fns = b.slice();
      var fn = fns.shift();
      var val = fn.apply(void 0, applyKeys.apply(void 0, args)(props));
      while (fn = fns.shift()) { val = fn(val); }
      return val
    } :
    applyKeys.apply(void 0, args)(b[0]).join(" ");

  }    }
}

function createUserAccessors(theme) {
  return Object.keys(theme).reduce(function (o, key) {
    if (typeof theme[key] === "object")
      { o[key] = createAccessor(createValuesAccessor(key)); }
    return o
  }, {})
}

function createValuesAccessor(key) {
  return function () {
    var keys = [], len = arguments.length;
    while ( len-- ) keys[ len ] = arguments[ len ];

    return function (props) {
    var vars = key ? props.theme[key] : props.theme;
    return values(plucks.apply(void 0, keys)(vars))
  };
  }
}

function values(obj) {
  return Object.keys(obj).map(function (k) { return obj[k]; })
}

function plucks() {
  var keys = [], len = arguments.length;
  while ( len-- ) keys[ len ] = arguments[ len ];

  return function (object) { return keys.reduce(function (obj, key) {
    obj[key] = object[key];
    return obj
  }, {}); }
}

return index;

})));
